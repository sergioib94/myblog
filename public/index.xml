<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>My New Hugo Site</title>
    <link>https://sergioib.netlify.app/</link>
    <description>Recent content on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 13 Mar 2021 13:08:14 +0100</lastBuildDate><atom:link href="https://sergioib.netlify.app/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Instalacion Openstack con Kolla Ansible</title>
      <link>https://sergioib.netlify.app/posts/instalacion-openstack-kolla-ansible/</link>
      <pubDate>Sat, 13 Mar 2021 13:08:14 +0100</pubDate>
      
      <guid>https://sergioib.netlify.app/posts/instalacion-openstack-kolla-ansible/</guid>
      <description>Introduccion Para esta practica contaremos con un escenario de 3 nodos creados con vagrant:
 Instalador (sistema ubuntu), sera donde se preparara openstack para su despliegue. Master (sistema ubuntu) Compute (sistema ubuntu)  El montaje de openstack requiere de mucho recurso por parte de la maquina anfitriona, el nodo master debe de tener al menos 6Gb de ram para que sea capaz de funcionar y de poder desplegarse sin problemas, con respecto a los otros 2 nodos se recomienda usar al menos 2Gb.</description>
    </item>
    
    <item>
      <title>Proxy Y Balanceador De Carga</title>
      <link>https://sergioib.netlify.app/posts/proxy-y-balanceador-de-carga/</link>
      <pubDate>Sat, 13 Mar 2021 12:44:43 +0100</pubDate>
      
      <guid>https://sergioib.netlify.app/posts/proxy-y-balanceador-de-carga/</guid>
      <description>Balanceador de carga En la maquina de nuestro escenario llamada balanceador, instalamos haproxy:
apt install haproxy Configuramos haproxy (/etc/haproxy/haproxy.cfg) de la siguiente forma:
global daemon maxconn 256 user haproxy group haproxy log 127.0.0.1 local0 log 127.0.0.1 local1 notice defaults mode http log global timeout connect 5000ms timeout client 50000ms timeout server 50000ms listen granja_cda bind 172.22.5.31:80 #aquí pon la dirección ip del balanceador mode http stats enable stats auth cda:cda balance roundrobin server uno 10.</description>
    </item>
    
    <item>
      <title>Kubernetes Letschat</title>
      <link>https://sergioib.netlify.app/posts/kubernetes-lets-chat/</link>
      <pubDate>Sat, 13 Mar 2021 12:13:11 +0100</pubDate>
      
      <guid>https://sergioib.netlify.app/posts/kubernetes-lets-chat/</guid>
      <description>Introduccion En este post, lo que haremos sera primero crear un cluster de kubernetes, para lo cual nuestro equipo debe de contar con al menos 4 o 5 Gb de ram al menos ya se van a crear 3 maquinas virtuales, un nodo master o controlador y 2 nodos secundarios.
En este escenario credo haciendo uso de vagrant, desplegaremos una aplicacion llamada letschat usando kubeadm.
Preparacion del escenario Empezamos creando en nuestro equipo un directorio donde almacenaremos nuestro escenario vagrant.</description>
    </item>
    
    <item>
      <title>Vpn Site to Site</title>
      <link>https://sergioib.netlify.app/posts/vpn-site-to-site/</link>
      <pubDate>Fri, 12 Mar 2021 19:00:38 +0100</pubDate>
      
      <guid>https://sergioib.netlify.app/posts/vpn-site-to-site/</guid>
      <description>Introduccion Configura una conexión VPN sitio a sitio entre dos equipos del cloud openstack:
Cada equipo estará conectado a dos redes, una de ellas en común. Para la autenticación de los extremos se usarán obligatoriamente certificados digitales, que se generarán utilizando openssl y se almacenarán en el directorio /etc/openvpn, junto con con los parámetros Diffie-Helman y el certificado de la propia Autoridad de Certificación.
Se utilizarán direcciones de la red 10.</description>
    </item>
    
    <item>
      <title>Rendimiento De Servidor Web Con Varnish</title>
      <link>https://sergioib.netlify.app/posts/rendimiento-de-servidor-web-con-varnish/</link>
      <pubDate>Fri, 12 Mar 2021 18:53:19 +0100</pubDate>
      
      <guid>https://sergioib.netlify.app/posts/rendimiento-de-servidor-web-con-varnish/</guid>
      <description>Tarea 1: Vamos a configurar una máquina con la configuración ganadora: nginx + fpm_php (socket unix.Para ello ejecuta la receta ansible que encontraras en este repositorio. Accede al wordpress y termina la configuración del sitio.  Una vez que tengamos el repositorio en nuestra maquina, debemos de modificar la ip que tenemos en nuestro fichero host y poner la ip del equipo al que nos vayamos a conectar, es este caso la de mi equipo es 172.</description>
    </item>
    
    <item>
      <title>ISCSI</title>
      <link>https://sergioib.netlify.app/posts/iscsi/</link>
      <pubDate>Fri, 12 Mar 2021 18:44:37 +0100</pubDate>
      
      <guid>https://sergioib.netlify.app/posts/iscsi/</guid>
      <description>Para esta practica se han creado 3 maquinas virtuales, 2 debian 10, una cliente y otra servidor con 3 discos de 1Gb y una maquina windows 7.
En el servidor, empezamos instalando los paquetes tgt y lvm2.
apt install tgt lvm2 Mientras en el cliente debian instalamos el paquete iscsi
apt install open-iscsi Preparamos los discos para el uso de ISCSI LUN (en el server), usando lvm2 creamos los volúmenes físicos:</description>
    </item>
    
    <item>
      <title>Montaje De Pila ELK</title>
      <link>https://sergioib.netlify.app/posts/montaje-de-pila-elk/</link>
      <pubDate>Fri, 12 Mar 2021 18:22:23 +0100</pubDate>
      
      <guid>https://sergioib.netlify.app/posts/montaje-de-pila-elk/</guid>
      <description>¿Que es una pila ELK? Es un conjunto de herramientas de gran potencial de código abierto que se combinan para crear una herramienta de administración de registros permitiendo la monitorización, consolidación y análisis de logs generados en múltiples servidores, estas herramientas son:ElasticSearch, Logstash y Kibana.
Para poder montar la pila completa sera necesario que la maquina que aloje las tres maquinas tenga mas de 2Gb de ram. Tambien es posible instalar estas herramientas en equipos distintos, sin embarlo la maquina donde se instale elasticsearch necesitara un minimo de 2gb.</description>
    </item>
    
    <item>
      <title>Introduccion a la Integracion Continua</title>
      <link>https://sergioib.netlify.app/posts/integracion-continua/</link>
      <pubDate>Fri, 12 Mar 2021 18:12:40 +0100</pubDate>
      
      <guid>https://sergioib.netlify.app/posts/integracion-continua/</guid>
      <description>Integración continua de aplicación Django (test + deploy) Vamos a trabajar con el repositorio de la aplicación django_tutorial. Esta aplicación tiene definidas una serie de test, que podemos estudiar en el fichero tests.py del directorio polls.
Para ejecutar las pruebas unitarias, ejecutamos la instrucción python3 manage.py test.
Clonamos nuestro repositorio github en nuestro entorno virtual:
(IC) sergioib@debian-sergio:~/Escritorio/Informatica/Virtualenv/IC$ git clone git@github.com:sergioib94/django_tutorial.git Clonando en &#39;django_tutorial&#39;... remote: Enumerating objects: 51, done. remote: Counting objects: 100% (51/51), done.</description>
    </item>
    
    <item>
      <title>Cortafuegos en Escenario Openstack</title>
      <link>https://sergioib.netlify.app/posts/cortafuegos-en-escenario-openstack/</link>
      <pubDate>Fri, 12 Mar 2021 17:53:20 +0100</pubDate>
      
      <guid>https://sergioib.netlify.app/posts/cortafuegos-en-escenario-openstack/</guid>
      <description>Vamos a construir un cortafuegos en la mquina dulcinea de nuestro escenario en openstack que nos permita controlar el tráfico de nuestra red. El cortafuegos que vamos a construir debe funcionar tras un reinicio.
En este caso la maquina dulcinea cuenta con 3 interfaces de red:
 eth0: interfaz al exterior eth1: interfaz de la red interna donde estan alojadas las maquinas freston(servidor ldap y de correos) y sancho (servidor base de datos y de copias de seguridad) eth2: interfaz a red dmz donde esta la maquina quijote (servidor web)  Política por defecto</description>
    </item>
    
    <item>
      <title>Sistemas De Ficheros Btrfs</title>
      <link>https://sergioib.netlify.app/posts/sistemas-de-ficheros-btrfs/</link>
      <pubDate>Fri, 12 Mar 2021 17:50:31 +0100</pubDate>
      
      <guid>https://sergioib.netlify.app/posts/sistemas-de-ficheros-btrfs/</guid>
      <description>• Crea un escenario que incluya una máquina y varios discos asociados a ella.
El escenario con el que contamos para esta practica es el de una maquina virtual con sistema operativo debían 10 creada con vagrant con 4 discos adicionales en el que se instalara un Raid5 usando los 3 primeros discos, y el ultimo disco se dejara para posteriormente comprobar sustituciones de discos simulando fallos.
vagrant@Btrfs:~$ lsblk -f NAME FSTYPE LABEL UUID FSAVAIL FSUSE% MOUNTPOINT sda ├─sda1 ext4 983742b1-65a8-49d1-a148-a3865ea09e24 16.</description>
    </item>
    
    <item>
      <title>Instalacion De Aplicacion Web Python Openstack</title>
      <link>https://sergioib.netlify.app/posts/instalacion-de-aplicacion-web-python-openstack/</link>
      <pubDate>Fri, 12 Mar 2021 16:01:48 +0100</pubDate>
      
      <guid>https://sergioib.netlify.app/posts/instalacion-de-aplicacion-web-python-openstack/</guid>
      <description>• Instala el CMS en el entorno de desarrollo. Debes utilizar un entorno virtual.
Entorno de desarrollo Creamos el entorno virtual:
sergioib@debian-sergio:~/Escritorio/Informatica/Virtualenv$ python3 -m venv mezzanine sergioib@debian-sergio:~/Escritorio/Informatica/Virtualenv$ source mezzanine/bin/activate Instalamos mezzanine:
(mezzanine) sergioib@debian-sergio:~/Escritorio/Informatica/Virtualenv/mezzanine$ pip install mezzanine Collecting mezzanine Downloading https://files.pythonhosted.org/packages/7f/cf/0f2cbd27edfc9568c7fad26ca217e02d209031e0298562a29040e2b75a5e/Mezzanine-4.3.1-py2.py3-none-any.whl (5.9MB) 100% |████████████████████████████████| 5.9MB 188kB/s Collecting tzlocal&amp;gt;=1.0 (from mezzanine) Downloading https://files.pythonhosted.org/packages/5d/94/d47b0fd5988e6b7059de05720a646a2930920fff247a826f61674d436ba4/tzlocal-2.1-py2.py3-none-any.whl Collecting grappelli-safe&amp;gt;=0.5.0 (from mezzanine) Downloading https://files.pythonhosted.org/packages/3e/af/10804d792cfe4eb0029959c55169086e2d4ab02b99d88bd4d85281f48245/grappelli_safe-0.5.2-py2.py3-none-any.whl (163kB) 100% |████████████████████████████████| 163kB 745kB/s Collecting django-contrib-comments (from mezzanine) Downloading https://files.pythonhosted.org/packages/67/45/1c55c21d5151e8c39c7991b351bb4fae152ce863bb4b6a1ed35e88f31511/django_contrib_comments-2.0.0-py3-none-any.whl (414kB) 100% |████████████████████████████████| 419kB 739kB/s Collecting future&amp;gt;=0.</description>
    </item>
    
    <item>
      <title>Https en Openstack</title>
      <link>https://sergioib.netlify.app/posts/https-en-openstack/</link>
      <pubDate>Fri, 12 Mar 2021 15:52:50 +0100</pubDate>
      
      <guid>https://sergioib.netlify.app/posts/https-en-openstack/</guid>
      <description>El siguiente paso de nuestro proyecto es configurar de forma adecuada el protocolo HTTPS en nuestro servidor web para nuestra aplicaciones web. Para ello vamos a emitir un certificado wildcard en la AC Gonzalo Nazareno utilizando para la petición la utilidad &amp;ldquo;gestiona&amp;rdquo;.
 Explica los pasos fundamentales para la creación del certificado. Especificando los campos que has rellenado en el fichero CSR.  Instalamos openssl sudo apt install openssl Se crea la clave</description>
    </item>
    
    <item>
      <title>Instalacion Y Configuracion Basica Vmware ESXI</title>
      <link>https://sergioib.netlify.app/posts/instalacion-y-configuracion-basica-vmware/</link>
      <pubDate>Fri, 12 Mar 2021 14:24:08 +0100</pubDate>
      
      <guid>https://sergioib.netlify.app/posts/instalacion-y-configuracion-basica-vmware/</guid>
      <description>La instalación inicialmente es bastante sencilla, haciendo uso de un usb con la iso de vmware 5.5 lo conectamos en el servidor y nos aseguramos de que este configurado en bios para que arranque por usb y no por otro medio.
Una vez que comience la instalación, lo primero sera confirmar dicha instalación y mas adelante tendremos que elegir el disco donde se instalara vmware. En este caso al haber una instalacion vmware anterior, tendremos que reinstalar vmware.</description>
    </item>
    
    <item>
      <title>Servidores Web Base De Datos Y Dns en Openstack</title>
      <link>https://sergioib.netlify.app/posts/servidores-web-base-de-datos-y-dns/</link>
      <pubDate>Fri, 12 Mar 2021 14:18:01 +0100</pubDate>
      
      <guid>https://sergioib.netlify.app/posts/servidores-web-base-de-datos-y-dns/</guid>
      <description>Configuración bind con vistas:    En la maquina de Freston empezamos instalando el servidor dns:
sudo apt install bind9 Una vez instalado bind9, lo primero sera configurar las vistas en /etc/bind/named.conf.local:
acl interna { 10.0.1.0/24; }; acl DMZ { 10.0.2.0/24; }; acl externa { 172.22.0.0/15; }; view interna { match-clients { interna; }; allow-recursion { any; }; zone &amp;quot;gonzalonazareno.org&amp;quot; { type master; file &amp;quot;db.interna.gonzalonazareno.org&amp;quot;; }; zone &amp;quot;1.</description>
    </item>
    
    <item>
      <title>Usuarios Grupos Y Acls en Ldap</title>
      <link>https://sergioib.netlify.app/posts/usuarios-grupos-y-acls-en-ldap/</link>
      <pubDate>Fri, 12 Mar 2021 14:14:51 +0100</pubDate>
      
      <guid>https://sergioib.netlify.app/posts/usuarios-grupos-y-acls-en-ldap/</guid>
      <description>Crea 10 usuarios con los nombres que prefieras en LDAP, esos usuarios deben ser objetos de los tipos posixAccount e inetOrgPerson. Estos usuarios tendrán un atributo userPassword.  Para crear estos usuarios, creamos un fichero .ldif llamado por ejemplo usuarios con el siguiente contenido:
dn: uid=sergio,ou=People,dc=sergio,dc=gonzalonazareno,dc=org objectClass: top objectClass: posixAccount objectClass: inetOrgPerson cn: Sergio Ibañez uid: sergio uidNumber: 2000 gidNumber: 2000 homeDirectory: /home/sergio loginShell: /bin/bash userPassword: {SSHA}PkyDS12f+fo6sR3uHGsY25CvUjMrmrVy sn: ibañez dn: uid=manuel,ou=People,dc=sergio,dc=gonzalonazareno,dc=org objectClass: top objectClass: posixAccount objectClass: inetOrgPerson cn: Manuel Lora uid: manuel uidNumber: 2001 gidNumber: 2001 homeDirectory: /home/lora loginShell: /bin/bash userPassword: {SSHA}ODN7zIXBS0rDW+Uf9Z1J1/GUcBXhtrS/ sn: lora dn: uid=juanan,ou=People,dc=sergio,dc=gonzalonazareno,dc=org objectClass: top objectClass: posixAccount objectClass: inetOrgPerson cn: Juan Antonio uid: juanan uidNumber: 2002 gidNumber: 2002 homeDirectory: /home/juanan loginShell: /bin/bash userPassword: {SSHA}V+mrXKnbB/ReYwrdQ7Gh85ZQZw1A2iqs sn: reifs dn: uid=fran,ou=People,dc=sergio,dc=gonzalonazareno,dc=org objectClass: top objectClass: posixAccount objectClass: inetOrgPerson cn: Fran Madueño uid: fran uidNumber: 2003 gidNumber: 2003 homeDirectory: /home/fran loginShell: /bin/bash userPassword: {SSHA}RnYnua1fD3L1UCc4arAfVrfNWrokHsoF sn: madueño dn: uid=alejandro,ou=People,dc=sergio,dc=gonzalonazareno,dc=org objectClass: top objectClass: posixAccount objectClass: inetOrgPerson cn: Alejando Gutierrez uid: alejandro uidNumber: 2004 gidNumber: 2004 homeDirectory: /home/alejandro loginShell: /bin/bash userPassword: {SSHA}H4js7CR0IjdgRIYJFtHA7zkq7+9gWNff sn: gutierrez dn: uid=calderon,ou=People,dc=sergio,dc=gonzalonazareno,dc=org objectClass: top objectClass: posixAccount objectClass: inetOrgPerson cn: Jose Miguel uid: calderon uidNumber: 2005 gidNumber: 2005 homeDirectory: /home/calderon loginShell: /bin/bash userPassword: {SSHA}ioP7oyy5KXGXmTQE8sLajhSTPV0bUyVk sn: calderon dn: uid=adrian,ou=People,dc=sergio,dc=gonzalonazareno,dc=org objectClass: top objectClass: posixAccount objectClass: inetOrgPerson cn: Adrian Jaramillo uid: adrian uidNumber: 2006 gidNumber: 2006 homeDirectory: /home/adrian loginShell: /bin/bash userPassword: {SSHA}jGxqVD3yK9yRm8qtWVuFW7du/I75p9Qv sn: jaramillo dn: uid=celia,ou=People,dc=sergio,dc=gonzalonazareno,dc=org objectClass: top objectClass: posixAccount objectClass: inetOrgPerson cn: Celia Garcia uid: celia uidNumber: 2007 gidNumber: 2007 homeDirectory: /home/celia loginShell: /bin/bash userPassword: {SSHA}WQ8IgcfkrrAz5sNwfqsdJhBtNXHJ1OyQ sn: garcia dn: uid=alvaro,ou=People,dc=sergio,dc=gonzalonazareno,dc=org objectClass: top objectClass: posixAccount objectClass: inetOrgPerson cn: Alvaro Vaca uid: alvaro uidNumber: 2008 gidNumber: 2008 homeDirectory: /home/alvaro loginShell: /bin/bash userPassword: {SSHA}W0XxEk1ojVDliy4jIN3IyZ4RVqFwiLxi sn: vaca dn: uid=juanlu,ou=People,dc=sergio,dc=gonzalonazareno,dc=org objectClass: top objectClass: posixAccount objectClass: inetOrgPerson cn: Juan Luis uid: juanlu uidNumber: 2009 gidNumber: 2009 homeDirectory: /home/juanlu loginShell: /bin/bash userPassword: {SSHA}u+yL9u8EiUlYVKHvsD+j+Ww7iOGaNOBW sn: millan En este fichero, la estructura con la que se van a crear los usuarios es la misma:</description>
    </item>
    
    <item>
      <title>Ldaps</title>
      <link>https://sergioib.netlify.app/posts/ldaps/</link>
      <pubDate>Fri, 12 Mar 2021 14:13:08 +0100</pubDate>
      
      <guid>https://sergioib.netlify.app/posts/ldaps/</guid>
      <description>LDAPs Lo primero que tendremos que hacer para usar ldaps, sera tener tanto un certificado .crt de la unidad certificadora, en este caso el IES Gonzalo Nazareno, un .crt firmado por la unidad certificadora y un fichero .key usado para crear un fichero csr que posteriormente se firmará.
Después de crear los certificados y ubicarlos en /etc/ssl/certs/ (los ficheros .crt) y el fichero .key en /etc/ssl/private/, hay que cambiar las acl con el comando setfacl para agregar los permisos:</description>
    </item>
    
    <item>
      <title>Instalacion y Configuracion OpenLDAP</title>
      <link>https://sergioib.netlify.app/posts/instalacion-y-configuracion-openldap/</link>
      <pubDate>Fri, 12 Mar 2021 14:11:19 +0100</pubDate>
      
      <guid>https://sergioib.netlify.app/posts/instalacion-y-configuracion-openldap/</guid>
      <description>Instalación Ldap sudo apt install slapd Por defecto nuestro dn será dc=gonzalonazareno,dc=org por lo que se cambiara la configuración básica de slapd de forma que coja como dn el nombre completo de nuestro servidor, que en mi caso es freston-sergio.gonzalonazareno.org, este cambio lo hacemos ejecutando:
sudo dpkg-reconfigure -plow slapd Indicando primero cual sera el nuevo nombre de dominio que usara ldap y después cambiando el nombre de la organización a IES Gonzalo Nazareno.</description>
    </item>
    
    <item>
      <title>Modificaciones Del Escenario Openstack</title>
      <link>https://sergioib.netlify.app/posts/modificaciones-del-escenario-openstack/</link>
      <pubDate>Fri, 12 Mar 2021 14:06:50 +0100</pubDate>
      
      <guid>https://sergioib.netlify.app/posts/modificaciones-del-escenario-openstack/</guid>
      <description>Modificaciones del escenario openstack  Creación de maquina Freston:  Esta maquina se creara igual que las anteriores, mediante un volumen con debian buster y se le agregara una interfaz en la red 10.0.1.0/24. En un principio como en esta red esta deshabilitado el servidor dhcp, esta maquina no recibirá ip ninguna y por lo tanto no se podrá acceder a ella de ningún modo, por lo que lo primero que se hará sera habilitar el dhcp en esta red para que freston obtenga una ip y una vez que se realicen los cambios básicos tales como asignarle una ip dinámica y asignarle al usuario freston una contraseña por si fuese necesario entrar por consola, se volverá a deshabilitar el dhcp.</description>
    </item>
    
    <item>
      <title>Despliegue Cms Java</title>
      <link>https://sergioib.netlify.app/posts/despliegue-cms-java/</link>
      <pubDate>Fri, 12 Mar 2021 13:49:27 +0100</pubDate>
      
      <guid>https://sergioib.netlify.app/posts/despliegue-cms-java/</guid>
      <description>Introduccion En este post, se va a desplegar una aplicacion cms java, en este caso Guacamole.
Guacamole permite acceder a uno o más escritorios desde cualquier lugar de forma remota, sin tener que instalar un cliente, especialmente cuando no es posible instalar un cliente. Al configurar un servidor Guacamole, puede proporcionar acceso a cualquier otra maquina en la red desde prácticamente cualquier otra maquina en Internet, en cualquier parte del mundo.</description>
    </item>
    
    <item>
      <title>HTTPS en OVH</title>
      <link>https://sergioib.netlify.app/posts/https-ovh/</link>
      <pubDate>Fri, 12 Mar 2021 13:05:15 +0100</pubDate>
      
      <guid>https://sergioib.netlify.app/posts/https-ovh/</guid>
      <description>Vamos a utilizar el servicio https://letsencrypt.org para solicitar los certificados de nuestras páginas.    Explica detenidamente cómo se solicita un certificado en Let&amp;rsquo;s Encrypt. En tu explicación deberás responder a estas preguntas:
 ¿Qué función tiene el cliente ACME?  El cliente ACME tiene dos funciones, por un lado valida el dominio y por otro lado solicita el certificado.
 ¿Qué configuración se realiza en el servidor web?</description>
    </item>
    
    <item>
      <title>Instalacion Y Configuracion Servidor Dns</title>
      <link>https://sergioib.netlify.app/posts/instalacion-y-configuracion-servidor-dns/</link>
      <pubDate>Fri, 12 Mar 2021 12:56:19 +0100</pubDate>
      
      <guid>https://sergioib.netlify.app/posts/instalacion-y-configuracion-servidor-dns/</guid>
      <description>Servidor DNSmasq  Instala el servidor dns dnsmasq en pandora.iesgn.org y configúralo para que los clientes puedan conocer los nombres necesarios.*  Instalación:
sudo apt install dnsmasq Configuración de dnsmasq (/etc/dnsmasq.conf):
En este fichero lo que haremos sera primero descomentar la linea strict-order para que de esta forma en el caso de que nuestro dns no sea capaz de resolver una petición, lea el fichero resolv.conf y le pregunte a la maquina que tengamos indicada en el fichero para que ella resuelva la petición.</description>
    </item>
    
    <item>
      <title>Actualizacion de Centos7 a Centos8</title>
      <link>https://sergioib.netlify.app/posts/actualizacion-centos8/</link>
      <pubDate>Fri, 12 Mar 2021 12:52:53 +0100</pubDate>
      
      <guid>https://sergioib.netlify.app/posts/actualizacion-centos8/</guid>
      <description>Introduccion Esta practica se realizara en nuestra maquina Quijote del escenario opestack creado anteriormente.
* Actualizacion de Centos 7 a Centos 8 en la maquina quijote* Antes de comenzar con la actualización comprobamos la versión de nuestra maquina centos:
[centos@quijote ~]$ cat /etc/centos-release CentOS Linux release 7.9.2009 (Core) En este caso comenzaremos con la version 7.9.2009 de centos.
Instalamos el repositorio epel en nuestro centos 7:
sudo yum install -y epel-release.</description>
    </item>
    
    <item>
      <title>Despliegue de Aplicaciones Python</title>
      <link>https://sergioib.netlify.app/posts/despliegue-de-aplicaciones-python/</link>
      <pubDate>Fri, 12 Mar 2021 12:22:28 +0100</pubDate>
      
      <guid>https://sergioib.netlify.app/posts/despliegue-de-aplicaciones-python/</guid>
      <description>Tarea 1: Entorno de desarrollo  Vamos a desarrollar la aplicación del tutorial de django 3.1. Vamos a configurar tu equipo como entorno de desarrollo para trabajar con la aplicación, para ello:
 Realiza un fork del repositorio de GitHub: https://github.com/josedom24/django_tutorial. Crea un entorno virtual de python3 e instala las dependencias necesarias para que funcione el proyecto (fichero requirements.txt).  Creamos el entorno virtual:
sergioib@debian-sergio:~/Escritorio/Informatica/Virtualenv$ python3 -m venv practica_despliegue Clonamos el repositorio de django-tutorial en el entorno virtual:</description>
    </item>
    
    <item>
      <title>Creacion de Escenario Openstack</title>
      <link>https://sergioib.netlify.app/posts/creacion-escenario-openstack/</link>
      <pubDate>Fri, 12 Mar 2021 11:43:35 +0100</pubDate>
      
      <guid>https://sergioib.netlify.app/posts/creacion-escenario-openstack/</guid>
      <description>Introduccion En este post se creara un escenario en openstack con varias maquinas virtuales donde a lo largo del curso se realizaran la mayoria de las practicas.
  Tarea 1: Creación de la red interna: ◦ Nombre red interna de &amp;lt;sergio.ibañez&amp;gt; ◦ 10.0.1.0/24
  Tarea 2: Creación de las instancias: ◦ Dulcinea: ▪ Debian Buster sobre volumen con sabor m1.mini ▪ Accesible directamente a través de la red externa y con una IP flotante ▪ Conectada a la red interna, de la que será la puerta de enlace ◦ Sancho: ▪ Ubuntu 20.</description>
    </item>
    
    <item>
      <title>Aplicaciones PHP en OVH</title>
      <link>https://sergioib.netlify.app/posts/aplicaciones-php-ovh/</link>
      <pubDate>Fri, 12 Mar 2021 10:37:20 +0100</pubDate>
      
      <guid>https://sergioib.netlify.app/posts/aplicaciones-php-ovh/</guid>
      <description>Migración de Drupal Este drupal que va a migrarse de la maquina local a la maquina virtual alojada en ovh, es el mismo drupal que se creo en la anterior practica &amp;ldquo;instalacion local de cms php&amp;rdquo;.
 Tarea 1. La aplicación se tendrá que migrar a un nuevo virtualhost al que se accederá con el nombre portal.iesgnXX.es.  Empezamos creando el virtualhost Portal, para ello accedemos a /etc/nginx/sites-availables/ y ejecutamos un sudo cp default portal:</description>
    </item>
    
    <item>
      <title>OVH Lemp</title>
      <link>https://sergioib.netlify.app/posts/ovh-lemp/</link>
      <pubDate>Fri, 12 Mar 2021 09:44:16 +0100</pubDate>
      
      <guid>https://sergioib.netlify.app/posts/ovh-lemp/</guid>
      <description>Introduccion En este post instalaremos un servidor Lemp (Linux (E)nginx Mariadb PHP) en una maquina virtual alojada en OVH.
 Tarea 1. Instalacion de servidor web nginx  sudo apt install nginx  Tarea 2. Instala un servidor de base de datos MariaDB. Ejecuta el programa necesario para asegurar el servicio, ya que lo vamos a tener corriendo en el entorno de producción.  sudo apt install -y mariadb-server mariadb-client Una vez que tengamos mariadb instalado, para asegurarlo ejecutamos sudo mysql_secure_installation:</description>
    </item>
    
    <item>
      <title>Servidor Web Nginx</title>
      <link>https://sergioib.netlify.app/posts/servidor-web-nginx/</link>
      <pubDate>Thu, 11 Mar 2021 16:43:41 +0100</pubDate>
      
      <guid>https://sergioib.netlify.app/posts/servidor-web-nginx/</guid>
      <description>Tarea 1: Crea una máquina del cloud con una red pública. Añade la clave pública del profesor a la máquina. Instala el servidor web nginx en la máquina. Modifica la página index.html que viene por defecto y accede a ella desde un navegador.
  Entrega la ip flotante de la máquina para que el profesor pueda acceder a ella.
  172.22.200.135
 Entrega una captura de pantalla accediendo a ella.</description>
    </item>
    
    <item>
      <title>Configuracion Cliente VPN con certificado x509</title>
      <link>https://sergioib.netlify.app/posts/configuracio-clientevpn/</link>
      <pubDate>Thu, 11 Mar 2021 16:19:25 +0100</pubDate>
      
      <guid>https://sergioib.netlify.app/posts/configuracio-clientevpn/</guid>
      <description>Genera una clave privada RSA 4096  Para generarnos nuestra clave privada rsa hacemos uso del comando openssl:
root@debian-sergio:~# openssl genrsa 4096 &amp;gt; /etc/ssl/private/debian-sergio.ibanez.key Generating RSA private key, 4096 bit long modulus (2 primes) ........................++++ .....................................................................................................................................................................................................................................................................................................................................................................................................................++++ e is 65537 (0x010001)  Genera una solicitud de firma de certificado (fichero CSR) y súbelo a gestiona  Creamos el fichero csr para que sea firmado con el siguiente comando y rellenamos los parámetros necesarios que se nos piden: Country Name, State or Province Name (full name), Locality Name, Organization Name, Organizational Unit Name y Common Name (e.</description>
    </item>
    
    <item>
      <title>Configuracion Apache con .htaccess</title>
      <link>https://sergioib.netlify.app/posts/configuracion-apache-con-htaccess/</link>
      <pubDate>Thu, 11 Mar 2021 16:17:14 +0100</pubDate>
      
      <guid>https://sergioib.netlify.app/posts/configuracion-apache-con-htaccess/</guid>
      <description>Date de alta en un proveedor de hosting. ¿Si necesitamos configurar el servidor web que han configurado los administradores del proveedor?, ¿qué podemos hacer? Explica la directiva AllowOverride de apache2. Utilizando archivos .htaccess realiza las siguientes configuraciones:  Se ha dado de alta en 000.webhost
 Tarea1: Habilita el listado de ficheros en la URL http://host.dominio/nas.  Configuramos el fichero .htaccess añadiéndole la siguiente linea:
Options +Indexes Creamos una carpeta llamada nas y un par de ficheros para hacer una prueba de funcionamiento.</description>
    </item>
    
    <item>
      <title>Control De Acceso Autentificacion Autorizacion</title>
      <link>https://sergioib.netlify.app/posts/control-de-acceso-autentificacion-autorizacion/</link>
      <pubDate>Thu, 11 Mar 2021 16:13:52 +0100</pubDate>
      
      <guid>https://sergioib.netlify.app/posts/control-de-acceso-autentificacion-autorizacion/</guid>
      <description>Tarea1: A la URL departamentos.iesgn.org/intranet sólo se debe tener acceso desde el cliente de la red local, y no se pueda acceder desde la anfitriona por la red pública. A la URL departamentos.iesgn.org/internet, sin embargo, sólo se debe tener acceso desde la anfitriona por la red pública, y no desde la red local.  Empezamos modificando el fichero departamentos.conf en /etc/apache2/sites-available de la siguiente forma:
ServerAdmin webmaster@localhost DocumentRoot /srv/www/departamentos ServerName www.</description>
    </item>
    
    <item>
      <title>Compilacion Programa C con Makefile</title>
      <link>https://sergioib.netlify.app/posts/compilacion-programac-makefile/</link>
      <pubDate>Thu, 11 Mar 2021 16:10:39 +0100</pubDate>
      
      <guid>https://sergioib.netlify.app/posts/compilacion-programac-makefile/</guid>
      <description>Compilacion paquete less Empezaremos ejecutando el siguiente comando para tener el código fuente del paquete que vamos a compilar que en este caso a modo de prueba se compilara el paquete less.
apt source less Una vez que se tenga el código en nuestra maquina, lo siguiente sera descomprimirlo ejecutando el comando tar.
tar xvzf less_487.orig.tar.gz Dentro del directorio less ejecutamos ./configure para comprobar si el paquete esta bien configurado para el sistema.</description>
    </item>
    
    <item>
      <title>Integridad Firmas Autentificacion</title>
      <link>https://sergioib.netlify.app/posts/integridad-firmas-autentificacion/</link>
      <pubDate>Thu, 11 Mar 2021 16:00:38 +0100</pubDate>
      
      <guid>https://sergioib.netlify.app/posts/integridad-firmas-autentificacion/</guid>
      <description>Firmas electrónicas  Manda un documento y la firma electrónica del mismo a un compañero. Verifica la firma que tu has recibido.  Creamos el fichero firmado:
sergioib@debian-sergio:~/Descargas$ gpg --output doc.sig --sign Triggers_I.ppt Verificacion de la firma de documento con compañero Lora:
sergioib@debian-sergio:~/Descargas$ gpg --output lora --decrypt documentolora.pdf.sig gpg: Firmado el mié 14 oct 2020 13:37:44 CEST gpg: usando RSA clave 9233303D1F5495739A6D2CB4636AE9EBCB7E3294 gpg: Firma correcta de &amp;quot;Manuel Lora Román &amp;lt;manuelloraroman@gmail.com&amp;gt;&amp;quot; [desconocido] gpg: ATENCIÓN: ¡Esta clave no está certificada por una firma de confianza!</description>
    </item>
    
    <item>
      <title>Instalacion Local CMS Php</title>
      <link>https://sergioib.netlify.app/posts/instalacion-local-cms-php/</link>
      <pubDate>Thu, 11 Mar 2021 10:13:49 +0100</pubDate>
      
      <guid>https://sergioib.netlify.app/posts/instalacion-local-cms-php/</guid>
      <description>Instalación de un servidor LAMP  Crea una instancia de vagrant basado en un box debian o ubuntu  Ejecutamos vagrant init en el directorio donde crearemos el vagrantfile.
Configuración del vagrantfile:
Vagrant.configure(&amp;quot;2&amp;quot;) do |config| config.vm.define :nodo1 do |nodo1| nodo1.vm.box = &amp;quot;debian/buster64&amp;quot; nodo1.vm.hostname = &amp;quot;server&amp;quot; nodo1.vm.network :private_network, type: &amp;quot;dhcp&amp;quot; end Una vez configurado el vagrantfile levantamos el escenario usando vagrant up y luego nos conectamos al servidor con vagrant ssh</description>
    </item>
    
    <item>
      <title>Mapeo URL Virtualhost</title>
      <link>https://sergioib.netlify.app/posts/mapeo-url-servidor-dhcp/</link>
      <pubDate>Thu, 11 Mar 2021 09:54:31 +0100</pubDate>
      
      <guid>https://sergioib.netlify.app/posts/mapeo-url-servidor-dhcp/</guid>
      <description>Crea un nuevo host virtual que es accedido con el nombre www.mapeo.com, cuyo DocumentRoot sea /srv/mapeo.  Creación del fichero .conf
vagrant@nodo1:/etc/apache2/sites-available$ sudo cp 000-default.conf mapeo.conf Modificaciones en mapeo.conf
&amp;lt;VirtualHost *:80&amp;gt; ServerAdmin webmaster@localhost DocumentRoot /srv/mapeo ServerName www.mapeo.com ErrorLog ${APACHE_LOG_DIR}/error.log CustomLog ${APACHE_LOG_DIR}/access.log combined &amp;lt;/VirtualHost&amp;gt; Creamos el directorio en srv
vagrant@nodo1:/srv$ sudo mkdir -p mapeo/principal vagrant@nodo1:/srv$ chown -R www-data:www-data mapeo/ Configuración apache2
&amp;lt;Directory /srv/&amp;gt; Options Indexes FollowSymLinks AllowOverride None Require all granted &amp;lt;/Directory&amp;gt; Creación del enlace simbólico</description>
    </item>
    
    <item>
      <title>Virtualhost Apache</title>
      <link>https://sergioib.netlify.app/posts/virtualhost-apache/</link>
      <pubDate>Thu, 11 Mar 2021 09:47:06 +0100</pubDate>
      
      <guid>https://sergioib.netlify.app/posts/virtualhost-apache/</guid>
      <description>Configuración de VirtualHosting Lo primero sera instalar apache2 en nuestra maquina virtual vagrant.
sudo apt install apache2 Una vez descargado apache2, creamos los ficheros.conf que usaran tanto www.iesgn.org como www.departamentosgn.org para ello primero copiamos el 000-default para crearlos y luego los modificamos dejándolos de la siguiente forma:
vagrant@nodo1:/etc/apache2/sites-available$ sudo cp 000-default.conf iesgn.conf vagrant@nodo1:/etc/apache2/sites-available$ sudo cp 000-default.conf departamentos.conf Modificaciones de iesgn.conf y departamentos.conf  iesgn.conf:  &amp;lt;VirtualHost *:80&amp;gt; ServerAdmin webmaster@localhost DocumentRoot /srv/www/iesgn ServerName www.</description>
    </item>
    
    <item>
      <title>Servidor DHCP Linux</title>
      <link>https://sergioib.netlify.app/posts/servidor-dhcp-linux/</link>
      <pubDate>Thu, 11 Mar 2021 09:33:55 +0100</pubDate>
      
      <guid>https://sergioib.netlify.app/posts/servidor-dhcp-linux/</guid>
      <description>Funcionamiento de un servidor DHCP El cliente al iniciarse se encuentra en estado init, sin saber sus parámetros ip en ese momento envía un mensaje DHCPDiscover a la dirección de broadcast para saber si algún servidor dhcp le puede ofrecer una ip. El cliente espera un tiempo entre 1 y 10 seg al enviar este dhcpdiscover para evitar posibles colisiones con otras peticiones de otros clientes.
Cuando ya se ha mandado el dhcpdiscover el cliente entra en fase selecting, en la que recibira las dhcpoffer de los servidores dhcp.</description>
    </item>
    
    <item>
      <title>Cifrado Asimetrico Gpg Y Openssl</title>
      <link>https://sergioib.netlify.app/posts/cifrado-asimetrico-gpg-y-openssl/</link>
      <pubDate>Thu, 11 Mar 2021 09:15:13 +0100</pubDate>
      
      <guid>https://sergioib.netlify.app/posts/cifrado-asimetrico-gpg-y-openssl/</guid>
      <description>Tarea 1: Generación de claves  Genera un par de claves (pública y privada). ¿En que directorio se guarda las claves de un usuario?  gpg --gen-key Se nos piden algunos datos como nombre y apellidos, correo y contraseña y una vez introducida la información, se ve que la clave se nos crea en un directorio oculto .gnupg
 gpg: clave CFCF1D130D5A52C5 marcada como de confianza absoluta gpg: creado el directorio &#39;/home/sergioib/.</description>
    </item>
    
    <item>
      <title>Creacion Blog Hugo</title>
      <link>https://sergioib.netlify.app/posts/creacion-blog-hugo/</link>
      <pubDate>Thu, 11 Mar 2021 08:07:44 +0100</pubDate>
      
      <guid>https://sergioib.netlify.app/posts/creacion-blog-hugo/</guid>
      <description>Introducción En este post se hablara de como ha sido creado este blog donde se van a ir metiendo varios trabajos y apuntos relacionados con el grado superior de Administracion de Sistemas Informaticos en Red (ASIR).
Creación del blog Para poder crear nuestro blog con hugo, lo primero que necesitaremos sera instalar hugo en nuestro sistema, en mi caso debian10. Esta instalacion la podemos hacer de la siguiente forma:
sudo apt install hugo Sin embargo, en mi caso por defecto se instala la version 0.</description>
    </item>
    
    <item>
      <title>Instalacion de debian10</title>
      <link>https://sergioib.netlify.app/posts/instalacion-debian10/</link>
      <pubDate>Wed, 10 Mar 2021 21:20:45 +0100</pubDate>
      
      <guid>https://sergioib.netlify.app/posts/instalacion-debian10/</guid>
      <description>Instacacion Debian 10 Introducción En un portátil (HP pavilion 15) con 1TB de disco se crearan particiones LVM donde se instalara un sistema debían 10. En el caso de mi disco ya tiene dos particiones en disco dedicadas a Windows 10 y otros, por lo que como Windows no es compatible con LVM, esas dos particiones no se van a tocar y la partición para Linux ocupara 500GB.
Ventajas de instalar el sistema en particiones lvm   Permite un almacenamiento mas flexible de archivos que haciendo particiones normales, ya que si a lo largo del tiempo se acaba el espacio de la partición puede redimensionarse e incluso añadir discos adicionales para aumentar el tamaño.</description>
    </item>
    
  </channel>
</rss>
