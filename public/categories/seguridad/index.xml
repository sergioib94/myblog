<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Seguridad on My New Hugo Site</title>
    <link>https://sergioib.netlify.app/categories/seguridad/</link>
    <description>Recent content in Seguridad on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 12 Mar 2021 19:00:38 +0100</lastBuildDate><atom:link href="https://sergioib.netlify.app/categories/seguridad/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Vpn Site to Site</title>
      <link>https://sergioib.netlify.app/posts/vpn-site-to-site/</link>
      <pubDate>Fri, 12 Mar 2021 19:00:38 +0100</pubDate>
      
      <guid>https://sergioib.netlify.app/posts/vpn-site-to-site/</guid>
      <description>Introduccion Configura una conexión VPN sitio a sitio entre dos equipos del cloud openstack:
Cada equipo estará conectado a dos redes, una de ellas en común. Para la autenticación de los extremos se usarán obligatoriamente certificados digitales, que se generarán utilizando openssl y se almacenarán en el directorio /etc/openvpn, junto con con los parámetros Diffie-Helman y el certificado de la propia Autoridad de Certificación.
Se utilizarán direcciones de la red 10.</description>
    </item>
    
    <item>
      <title>Cortafuegos en Escenario Openstack</title>
      <link>https://sergioib.netlify.app/posts/cortafuegos-en-escenario-openstack/</link>
      <pubDate>Fri, 12 Mar 2021 17:53:20 +0100</pubDate>
      
      <guid>https://sergioib.netlify.app/posts/cortafuegos-en-escenario-openstack/</guid>
      <description>Vamos a construir un cortafuegos en la mquina dulcinea de nuestro escenario en openstack que nos permita controlar el tráfico de nuestra red. El cortafuegos que vamos a construir debe funcionar tras un reinicio.
En este caso la maquina dulcinea cuenta con 3 interfaces de red:
 eth0: interfaz al exterior eth1: interfaz de la red interna donde estan alojadas las maquinas freston(servidor ldap y de correos) y sancho (servidor base de datos y de copias de seguridad) eth2: interfaz a red dmz donde esta la maquina quijote (servidor web)  Política por defecto</description>
    </item>
    
    <item>
      <title>Https en Openstack</title>
      <link>https://sergioib.netlify.app/posts/https-en-openstack/</link>
      <pubDate>Fri, 12 Mar 2021 15:52:50 +0100</pubDate>
      
      <guid>https://sergioib.netlify.app/posts/https-en-openstack/</guid>
      <description>El siguiente paso de nuestro proyecto es configurar de forma adecuada el protocolo HTTPS en nuestro servidor web para nuestra aplicaciones web. Para ello vamos a emitir un certificado wildcard en la AC Gonzalo Nazareno utilizando para la petición la utilidad &amp;ldquo;gestiona&amp;rdquo;.
 Explica los pasos fundamentales para la creación del certificado. Especificando los campos que has rellenado en el fichero CSR.  Instalamos openssl sudo apt install openssl Se crea la clave</description>
    </item>
    
    <item>
      <title>HTTPS en OVH</title>
      <link>https://sergioib.netlify.app/posts/https-ovh/</link>
      <pubDate>Fri, 12 Mar 2021 13:05:15 +0100</pubDate>
      
      <guid>https://sergioib.netlify.app/posts/https-ovh/</guid>
      <description>Vamos a utilizar el servicio https://letsencrypt.org para solicitar los certificados de nuestras páginas.    Explica detenidamente cómo se solicita un certificado en Let&amp;rsquo;s Encrypt. En tu explicación deberás responder a estas preguntas:
 ¿Qué función tiene el cliente ACME?  El cliente ACME tiene dos funciones, por un lado valida el dominio y por otro lado solicita el certificado.
 ¿Qué configuración se realiza en el servidor web?</description>
    </item>
    
    <item>
      <title>Configuracion Cliente VPN con certificado x509</title>
      <link>https://sergioib.netlify.app/posts/configuracio-clientevpn/</link>
      <pubDate>Thu, 11 Mar 2021 16:19:25 +0100</pubDate>
      
      <guid>https://sergioib.netlify.app/posts/configuracio-clientevpn/</guid>
      <description>Genera una clave privada RSA 4096  Para generarnos nuestra clave privada rsa hacemos uso del comando openssl:
root@debian-sergio:~# openssl genrsa 4096 &amp;gt; /etc/ssl/private/debian-sergio.ibanez.key Generating RSA private key, 4096 bit long modulus (2 primes) ........................++++ .....................................................................................................................................................................................................................................................................................................................................................................................................................++++ e is 65537 (0x010001)  Genera una solicitud de firma de certificado (fichero CSR) y súbelo a gestiona  Creamos el fichero csr para que sea firmado con el siguiente comando y rellenamos los parámetros necesarios que se nos piden: Country Name, State or Province Name (full name), Locality Name, Organization Name, Organizational Unit Name y Common Name (e.</description>
    </item>
    
    <item>
      <title>Control De Acceso Autentificacion Autorizacion</title>
      <link>https://sergioib.netlify.app/posts/control-de-acceso-autentificacion-autorizacion/</link>
      <pubDate>Thu, 11 Mar 2021 16:13:52 +0100</pubDate>
      
      <guid>https://sergioib.netlify.app/posts/control-de-acceso-autentificacion-autorizacion/</guid>
      <description>Tarea1: A la URL departamentos.iesgn.org/intranet sólo se debe tener acceso desde el cliente de la red local, y no se pueda acceder desde la anfitriona por la red pública. A la URL departamentos.iesgn.org/internet, sin embargo, sólo se debe tener acceso desde la anfitriona por la red pública, y no desde la red local.  Empezamos modificando el fichero departamentos.conf en /etc/apache2/sites-available de la siguiente forma:
ServerAdmin webmaster@localhost DocumentRoot /srv/www/departamentos ServerName www.</description>
    </item>
    
    <item>
      <title>Integridad, firmas y autentificacion</title>
      <link>https://sergioib.netlify.app/posts/integridad-firmas-autentificacion/</link>
      <pubDate>Thu, 11 Mar 2021 16:00:38 +0100</pubDate>
      
      <guid>https://sergioib.netlify.app/posts/integridad-firmas-autentificacion/</guid>
      <description>Firmas electrónicas  Manda un documento y la firma electrónica del mismo a un compañero. Verifica la firma que tu has recibido.  Creamos el fichero firmado:
sergioib@debian-sergio:~/Descargas$ gpg --output doc.sig --sign Triggers_I.ppt Verificacion de la firma de documento con compañero Lora:
sergioib@debian-sergio:~/Descargas$ gpg --output lora --decrypt documentolora.pdf.sig gpg: Firmado el mié 14 oct 2020 13:37:44 CEST gpg: usando RSA clave 9233303D1F5495739A6D2CB4636AE9EBCB7E3294 gpg: Firma correcta de &amp;quot;Manuel Lora Román &amp;lt;manuelloraroman@gmail.com&amp;gt;&amp;quot; [desconocido] gpg: ATENCIÓN: ¡Esta clave no está certificada por una firma de confianza!</description>
    </item>
    
    <item>
      <title>Cifrado Asimetrico Gpg Y Openssl</title>
      <link>https://sergioib.netlify.app/posts/cifrado-asimetrico-gpg-y-openssl/</link>
      <pubDate>Thu, 11 Mar 2021 09:15:13 +0100</pubDate>
      
      <guid>https://sergioib.netlify.app/posts/cifrado-asimetrico-gpg-y-openssl/</guid>
      <description>Tarea 1: Generación de claves  Genera un par de claves (pública y privada). ¿En que directorio se guarda las claves de un usuario?  gpg --gen-key Se nos piden algunos datos como nombre y apellidos, correo y contraseña y una vez introducida la información, se ve que la clave se nos crea en un directorio oculto .gnupg
 gpg: clave CFCF1D130D5A52C5 marcada como de confianza absoluta gpg: creado el directorio &#39;/home/sergioib/.</description>
    </item>
    
  </channel>
</rss>
