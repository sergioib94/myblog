<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Aplicaciones Web on El rincon del admin</title>
    <link>https://sergioib.netlify.app/categories/aplicaciones-web/</link>
    <description>Recent content in Aplicaciones Web on El rincon del admin</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 14 Mar 2021 13:26:35 +0100</lastBuildDate><atom:link href="https://sergioib.netlify.app/categories/aplicaciones-web/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Aplicaciones web PHP en Docker</title>
      <link>https://sergioib.netlify.app/posts/aplicaciones-web-php-en-docker/</link>
      <pubDate>Sun, 14 Mar 2021 13:26:35 +0100</pubDate>
      
      <guid>https://sergioib.netlify.app/posts/aplicaciones-web-php-en-docker/</guid>
      <description>Introduccion En esta practica haciendo usao de docker, vamos a desplegar distintas aplicaciones en contenedores, en los primeros ejercicios se trabajara con bookmedik (aplicacion para organizar citas medicas) y en las dos ultimas se usara drupal y joomla.
La forma de trabajar sera la siguiente, en nuestro equipo tendremos un directorio con todo lo necesario para los distintos ejercicios y dentro de este directorio habra otros dos (en los casos que sea necesario), tendremos un directorio buil donde tendremos tanto el directorio de la aplicacion con los ficheros necesarios para su ejecucion, un dockerfile que usaremos para crear los contenedores y un fichero script ue modificara y añadira los datos necesario en los contenedores.</description>
    </item>
    
    <item>
      <title>Creacion blog Pelican</title>
      <link>https://sergioib.netlify.app/posts/creacion-blog-pelican/</link>
      <pubDate>Sat, 13 Mar 2021 22:18:18 +0100</pubDate>
      
      <guid>https://sergioib.netlify.app/posts/creacion-blog-pelican/</guid>
      <description>Instalacion de Pelican Para poder instalar este gestor de paginas web, ejecutamos apt install pelican y una vez instalado ejecutamos apt install markdown, que es el idioma en el que se escribirán los artículos del blog. Una vez instalados pelican y markdown en nuestro entorno de desarrollo (nuestra máquina) estará listo para usarse.
apt install pelican apt install markdown Configuracion de un sitio web Para comenzar la configuracion de nuestro sitio web, lo primero sera ejecutar el comando pelican-quickstart donde empezaran a salir preguntas sobre la configuracion que deberan responderse:</description>
    </item>
    
    <item>
      <title>Introduccion a la Integracion Continua</title>
      <link>https://sergioib.netlify.app/posts/integracion-continua/</link>
      <pubDate>Fri, 12 Mar 2021 18:12:40 +0100</pubDate>
      
      <guid>https://sergioib.netlify.app/posts/integracion-continua/</guid>
      <description>Integración continua de aplicación Django (test + deploy) Vamos a trabajar con el repositorio de la aplicación django_tutorial. Esta aplicación tiene definidas una serie de test, que podemos estudiar en el fichero tests.py del directorio polls.
Para ejecutar las pruebas unitarias, ejecutamos la instrucción python3 manage.py test.
Clonamos nuestro repositorio github en nuestro entorno virtual:
(IC) sergioib@debian-sergio:~/Escritorio/Informatica/Virtualenv/IC$ git clone git@github.com:sergioib94/django_tutorial.git Clonando en &#39;django_tutorial&#39;... remote: Enumerating objects: 51, done. remote: Counting objects: 100% (51/51), done.</description>
    </item>
    
    <item>
      <title>Instalacion de Mezzanine en Openstack</title>
      <link>https://sergioib.netlify.app/posts/instalacion-de-aplicacion-web-python-openstack/</link>
      <pubDate>Fri, 12 Mar 2021 16:01:48 +0100</pubDate>
      
      <guid>https://sergioib.netlify.app/posts/instalacion-de-aplicacion-web-python-openstack/</guid>
      <description>• Instala el CMS en el entorno de desarrollo. Debes utilizar un entorno virtual.
Entorno de desarrollo Creamos el entorno virtual:
sergioib@debian-sergio:~/Escritorio/Informatica/Virtualenv$ python3 -m venv mezzanine sergioib@debian-sergio:~/Escritorio/Informatica/Virtualenv$ source mezzanine/bin/activate Instalamos mezzanine:
(mezzanine) sergioib@debian-sergio:~/Escritorio/Informatica/Virtualenv/mezzanine$ pip install mezzanine Collecting mezzanine Downloading https://files.pythonhosted.org/packages/7f/cf/0f2cbd27edfc9568c7fad26ca217e02d209031e0298562a29040e2b75a5e/Mezzanine-4.3.1-py2.py3-none-any.whl (5.9MB) 100% |████████████████████████████████| 5.9MB 188kB/s Collecting tzlocal&amp;gt;=1.0 (from mezzanine) Downloading https://files.pythonhosted.org/packages/5d/94/d47b0fd5988e6b7059de05720a646a2930920fff247a826f61674d436ba4/tzlocal-2.1-py2.py3-none-any.whl Collecting grappelli-safe&amp;gt;=0.5.0 (from mezzanine) Downloading https://files.pythonhosted.org/packages/3e/af/10804d792cfe4eb0029959c55169086e2d4ab02b99d88bd4d85281f48245/grappelli_safe-0.5.2-py2.py3-none-any.whl (163kB) 100% |████████████████████████████████| 163kB 745kB/s Collecting django-contrib-comments (from mezzanine) Downloading https://files.pythonhosted.org/packages/67/45/1c55c21d5151e8c39c7991b351bb4fae152ce863bb4b6a1ed35e88f31511/django_contrib_comments-2.0.0-py3-none-any.whl (414kB) 100% |████████████████████████████████| 419kB 739kB/s Collecting future&amp;gt;=0.</description>
    </item>
    
    <item>
      <title>Despliegue CMS Java</title>
      <link>https://sergioib.netlify.app/posts/despliegue-cms-java/</link>
      <pubDate>Fri, 12 Mar 2021 13:49:27 +0100</pubDate>
      
      <guid>https://sergioib.netlify.app/posts/despliegue-cms-java/</guid>
      <description>Introduccion En este post, se va a desplegar una aplicacion cms java, en este caso Guacamole.
Guacamole permite acceder a uno o más escritorios desde cualquier lugar de forma remota, sin tener que instalar un cliente, especialmente cuando no es posible instalar un cliente. Al configurar un servidor Guacamole, puede proporcionar acceso a cualquier otra maquina en la red desde prácticamente cualquier otra maquina en Internet, en cualquier parte del mundo.</description>
    </item>
    
    <item>
      <title>Despliegue de aplicaciones python</title>
      <link>https://sergioib.netlify.app/posts/despliegue-de-aplicaciones-python/</link>
      <pubDate>Fri, 12 Mar 2021 12:22:28 +0100</pubDate>
      
      <guid>https://sergioib.netlify.app/posts/despliegue-de-aplicaciones-python/</guid>
      <description>Tarea 1: Entorno de desarrollo  Vamos a desarrollar la aplicación del tutorial de django 3.1. Vamos a configurar tu equipo como entorno de desarrollo para trabajar con la aplicación, para ello:
 Realiza un fork del repositorio de GitHub: https://github.com/josedom24/django_tutorial. Crea un entorno virtual de python3 e instala las dependencias necesarias para que funcione el proyecto (fichero requirements.txt).  Creamos el entorno virtual:
sergioib@debian-sergio:~/Escritorio/Informatica/Virtualenv$ python3 -m venv practica_despliegue Clonamos el repositorio de django-tutorial en el entorno virtual:</description>
    </item>
    
    <item>
      <title>Aplicaciones PHP en OVH</title>
      <link>https://sergioib.netlify.app/posts/aplicaciones-php-ovh/</link>
      <pubDate>Fri, 12 Mar 2021 10:37:20 +0100</pubDate>
      
      <guid>https://sergioib.netlify.app/posts/aplicaciones-php-ovh/</guid>
      <description>Migración de Drupal Este drupal que va a migrarse de la maquina local a la maquina virtual alojada en ovh, es el mismo drupal que se creo en la anterior practica &amp;ldquo;instalacion local de cms php&amp;rdquo;.
 Tarea 1. La aplicación se tendrá que migrar a un nuevo virtualhost al que se accederá con el nombre portal.iesgnXX.es.  Empezamos creando el virtualhost Portal, para ello accedemos a /etc/nginx/sites-availables/ y ejecutamos un sudo cp default portal:</description>
    </item>
    
    <item>
      <title>Instalacion local CMS PHP</title>
      <link>https://sergioib.netlify.app/posts/instalacion-local-cms-php/</link>
      <pubDate>Thu, 11 Mar 2021 10:13:49 +0100</pubDate>
      
      <guid>https://sergioib.netlify.app/posts/instalacion-local-cms-php/</guid>
      <description>Instalación de un servidor LAMP  Crea una instancia de vagrant basado en un box debian o ubuntu  Ejecutamos vagrant init en el directorio donde crearemos el vagrantfile.
Configuración del vagrantfile:
Vagrant.configure(&amp;quot;2&amp;quot;) do |config| config.vm.define :nodo1 do |nodo1| nodo1.vm.box = &amp;quot;debian/buster64&amp;quot; nodo1.vm.hostname = &amp;quot;server&amp;quot; nodo1.vm.network :private_network, type: &amp;quot;dhcp&amp;quot; end Una vez configurado el vagrantfile levantamos el escenario usando vagrant up y luego nos conectamos al servidor con vagrant ssh</description>
    </item>
    
    <item>
      <title>Creacion blog Hugo</title>
      <link>https://sergioib.netlify.app/posts/creacion-blog-hugo/</link>
      <pubDate>Thu, 11 Mar 2021 08:07:44 +0100</pubDate>
      
      <guid>https://sergioib.netlify.app/posts/creacion-blog-hugo/</guid>
      <description>Introducción En este post se hablara de como ha sido creado este blog usando hugo donde se van a ir publicando trabajos y apuntos relacionados con el grado superior de Administracion de Sistemas Informaticos en Red (ASIR) ademas de apuntes o documentacion de interes y ademas la configuracion continua que se hara a traves de Github y Netlify.
Creación del blog Para poder crear nuestro blog con hugo, lo primero que necesitaremos sera instalar hugo en nuestro sistema, en mi caso debian 10.</description>
    </item>
    
  </channel>
</rss>
