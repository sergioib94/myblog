<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>openstack on My New Hugo Site</title>
    <link>https://sergioib.netlify.app/tags/openstack/</link>
    <description>Recent content in openstack on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 13 Mar 2021 13:08:14 +0100</lastBuildDate><atom:link href="https://sergioib.netlify.app/tags/openstack/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Instalacion Openstack con Kolla Ansible</title>
      <link>https://sergioib.netlify.app/posts/instalacion-openstack-kolla-ansible/</link>
      <pubDate>Sat, 13 Mar 2021 13:08:14 +0100</pubDate>
      
      <guid>https://sergioib.netlify.app/posts/instalacion-openstack-kolla-ansible/</guid>
      <description>Introduccion Para esta practica contaremos con un escenario de 3 nodos creados con vagrant:
 Instalador (sistema ubuntu), sera donde se preparara openstack para su despliegue. Master (sistema ubuntu) Compute (sistema ubuntu)  El montaje de openstack requiere de mucho recurso por parte de la maquina anfitriona, el nodo master debe de tener al menos 6Gb de ram para que sea capaz de funcionar y de poder desplegarse sin problemas, con respecto a los otros 2 nodos se recomienda usar al menos 2Gb.</description>
    </item>
    
    <item>
      <title>Vpn Site to Site</title>
      <link>https://sergioib.netlify.app/posts/vpn-site-to-site/</link>
      <pubDate>Fri, 12 Mar 2021 19:00:38 +0100</pubDate>
      
      <guid>https://sergioib.netlify.app/posts/vpn-site-to-site/</guid>
      <description>Introduccion Configura una conexión VPN sitio a sitio entre dos equipos del cloud openstack:
Cada equipo estará conectado a dos redes, una de ellas en común. Para la autenticación de los extremos se usarán obligatoriamente certificados digitales, que se generarán utilizando openssl y se almacenarán en el directorio /etc/openvpn, junto con con los parámetros Diffie-Helman y el certificado de la propia Autoridad de Certificación.
Se utilizarán direcciones de la red 10.</description>
    </item>
    
    <item>
      <title>Montaje De Pila ELK</title>
      <link>https://sergioib.netlify.app/posts/montaje-de-pila-elk/</link>
      <pubDate>Fri, 12 Mar 2021 18:22:23 +0100</pubDate>
      
      <guid>https://sergioib.netlify.app/posts/montaje-de-pila-elk/</guid>
      <description>¿Que es una pila ELK? Es un conjunto de herramientas de gran potencial de código abierto que se combinan para crear una herramienta de administración de registros permitiendo la monitorización, consolidación y análisis de logs generados en múltiples servidores, estas herramientas son:ElasticSearch, Logstash y Kibana.
Para poder montar la pila completa sera necesario que la maquina que aloje las tres maquinas tenga mas de 2Gb de ram. Tambien es posible instalar estas herramientas en equipos distintos, sin embarlo la maquina donde se instale elasticsearch necesitara un minimo de 2gb.</description>
    </item>
    
    <item>
      <title>Cortafuegos en Escenario Openstack</title>
      <link>https://sergioib.netlify.app/posts/cortafuegos-en-escenario-openstack/</link>
      <pubDate>Fri, 12 Mar 2021 17:53:20 +0100</pubDate>
      
      <guid>https://sergioib.netlify.app/posts/cortafuegos-en-escenario-openstack/</guid>
      <description>Vamos a construir un cortafuegos en la mquina dulcinea de nuestro escenario en openstack que nos permita controlar el tráfico de nuestra red. El cortafuegos que vamos a construir debe funcionar tras un reinicio.
En este caso la maquina dulcinea cuenta con 3 interfaces de red:
 eth0: interfaz al exterior eth1: interfaz de la red interna donde estan alojadas las maquinas freston(servidor ldap y de correos) y sancho (servidor base de datos y de copias de seguridad) eth2: interfaz a red dmz donde esta la maquina quijote (servidor web)  Política por defecto</description>
    </item>
    
    <item>
      <title>Instalacion De Aplicacion Web Python Openstack</title>
      <link>https://sergioib.netlify.app/posts/instalacion-de-aplicacion-web-python-openstack/</link>
      <pubDate>Fri, 12 Mar 2021 16:01:48 +0100</pubDate>
      
      <guid>https://sergioib.netlify.app/posts/instalacion-de-aplicacion-web-python-openstack/</guid>
      <description>• Instala el CMS en el entorno de desarrollo. Debes utilizar un entorno virtual.
Entorno de desarrollo Creamos el entorno virtual:
sergioib@debian-sergio:~/Escritorio/Informatica/Virtualenv$ python3 -m venv mezzanine sergioib@debian-sergio:~/Escritorio/Informatica/Virtualenv$ source mezzanine/bin/activate Instalamos mezzanine:
(mezzanine) sergioib@debian-sergio:~/Escritorio/Informatica/Virtualenv/mezzanine$ pip install mezzanine Collecting mezzanine Downloading https://files.pythonhosted.org/packages/7f/cf/0f2cbd27edfc9568c7fad26ca217e02d209031e0298562a29040e2b75a5e/Mezzanine-4.3.1-py2.py3-none-any.whl (5.9MB) 100% |████████████████████████████████| 5.9MB 188kB/s Collecting tzlocal&amp;gt;=1.0 (from mezzanine) Downloading https://files.pythonhosted.org/packages/5d/94/d47b0fd5988e6b7059de05720a646a2930920fff247a826f61674d436ba4/tzlocal-2.1-py2.py3-none-any.whl Collecting grappelli-safe&amp;gt;=0.5.0 (from mezzanine) Downloading https://files.pythonhosted.org/packages/3e/af/10804d792cfe4eb0029959c55169086e2d4ab02b99d88bd4d85281f48245/grappelli_safe-0.5.2-py2.py3-none-any.whl (163kB) 100% |████████████████████████████████| 163kB 745kB/s Collecting django-contrib-comments (from mezzanine) Downloading https://files.pythonhosted.org/packages/67/45/1c55c21d5151e8c39c7991b351bb4fae152ce863bb4b6a1ed35e88f31511/django_contrib_comments-2.0.0-py3-none-any.whl (414kB) 100% |████████████████████████████████| 419kB 739kB/s Collecting future&amp;gt;=0.</description>
    </item>
    
    <item>
      <title>Https en Openstack</title>
      <link>https://sergioib.netlify.app/posts/https-en-openstack/</link>
      <pubDate>Fri, 12 Mar 2021 15:52:50 +0100</pubDate>
      
      <guid>https://sergioib.netlify.app/posts/https-en-openstack/</guid>
      <description>El siguiente paso de nuestro proyecto es configurar de forma adecuada el protocolo HTTPS en nuestro servidor web para nuestra aplicaciones web. Para ello vamos a emitir un certificado wildcard en la AC Gonzalo Nazareno utilizando para la petición la utilidad &amp;ldquo;gestiona&amp;rdquo;.
 Explica los pasos fundamentales para la creación del certificado. Especificando los campos que has rellenado en el fichero CSR.  Instalamos openssl sudo apt install openssl Se crea la clave</description>
    </item>
    
    <item>
      <title>Servidores Web Base de Datos y Dns en Openstack</title>
      <link>https://sergioib.netlify.app/posts/servidores-web-base-de-datos-y-dns/</link>
      <pubDate>Fri, 12 Mar 2021 14:18:01 +0100</pubDate>
      
      <guid>https://sergioib.netlify.app/posts/servidores-web-base-de-datos-y-dns/</guid>
      <description>Configuración bind con vistas:    En la maquina de Freston empezamos instalando el servidor dns:
sudo apt install bind9 Una vez instalado bind9, lo primero sera configurar las vistas en /etc/bind/named.conf.local:
acl interna { 10.0.1.0/24; }; acl DMZ { 10.0.2.0/24; }; acl externa { 172.22.0.0/15; }; view interna { match-clients { interna; }; allow-recursion { any; }; zone &amp;quot;gonzalonazareno.org&amp;quot; { type master; file &amp;quot;db.interna.gonzalonazareno.org&amp;quot;; }; zone &amp;quot;1.</description>
    </item>
    
    <item>
      <title>Ldaps</title>
      <link>https://sergioib.netlify.app/posts/ldaps/</link>
      <pubDate>Fri, 12 Mar 2021 14:13:08 +0100</pubDate>
      
      <guid>https://sergioib.netlify.app/posts/ldaps/</guid>
      <description>LDAPs Lo primero que tendremos que hacer para usar ldaps, sera tener tanto un certificado .crt de la unidad certificadora, en este caso el IES Gonzalo Nazareno, un .crt firmado por la unidad certificadora y un fichero .key usado para crear un fichero csr que posteriormente se firmará.
Después de crear los certificados y ubicarlos en /etc/ssl/certs/ (los ficheros .crt) y el fichero .key en /etc/ssl/private/, hay que cambiar las acl con el comando setfacl para agregar los permisos:</description>
    </item>
    
    <item>
      <title>Instalacion y Configuracion OpenLDAP</title>
      <link>https://sergioib.netlify.app/posts/instalacion-y-configuracion-openldap/</link>
      <pubDate>Fri, 12 Mar 2021 14:11:19 +0100</pubDate>
      
      <guid>https://sergioib.netlify.app/posts/instalacion-y-configuracion-openldap/</guid>
      <description>Instalación Ldap sudo apt install slapd Por defecto nuestro dn será dc=gonzalonazareno,dc=org por lo que se cambiara la configuración básica de slapd de forma que coja como dn el nombre completo de nuestro servidor, que en mi caso es freston-sergio.gonzalonazareno.org, este cambio lo hacemos ejecutando:
sudo dpkg-reconfigure -plow slapd Indicando primero cual sera el nuevo nombre de dominio que usara ldap y después cambiando el nombre de la organización a IES Gonzalo Nazareno.</description>
    </item>
    
    <item>
      <title>Modificaciones Del Escenario Openstack</title>
      <link>https://sergioib.netlify.app/posts/modificaciones-del-escenario-openstack/</link>
      <pubDate>Fri, 12 Mar 2021 14:06:50 +0100</pubDate>
      
      <guid>https://sergioib.netlify.app/posts/modificaciones-del-escenario-openstack/</guid>
      <description>Modificaciones del escenario openstack  Creación de maquina Freston:  Esta maquina se creara igual que las anteriores, mediante un volumen con debian buster y se le agregara una interfaz en la red 10.0.1.0/24. En un principio como en esta red esta deshabilitado el servidor dhcp, esta maquina no recibirá ip ninguna y por lo tanto no se podrá acceder a ella de ningún modo, por lo que lo primero que se hará sera habilitar el dhcp en esta red para que freston obtenga una ip y una vez que se realicen los cambios básicos tales como asignarle una ip dinámica y asignarle al usuario freston una contraseña por si fuese necesario entrar por consola, se volverá a deshabilitar el dhcp.</description>
    </item>
    
    <item>
      <title>Actualizacion de Centos7 a Centos8</title>
      <link>https://sergioib.netlify.app/posts/actualizacion-centos8/</link>
      <pubDate>Fri, 12 Mar 2021 12:52:53 +0100</pubDate>
      
      <guid>https://sergioib.netlify.app/posts/actualizacion-centos8/</guid>
      <description>Introduccion Esta practica se realizara en nuestra maquina Quijote del escenario opestack creado anteriormente.
* Actualizacion de Centos 7 a Centos 8 en la maquina quijote* Antes de comenzar con la actualización comprobamos la versión de nuestra maquina centos:
[centos@quijote ~]$ cat /etc/centos-release CentOS Linux release 7.9.2009 (Core) En este caso comenzaremos con la version 7.9.2009 de centos.
Instalamos el repositorio epel en nuestro centos 7:
sudo yum install -y epel-release.</description>
    </item>
    
    <item>
      <title>Creacion de Escenario Openstack</title>
      <link>https://sergioib.netlify.app/posts/creacion-escenario-openstack/</link>
      <pubDate>Fri, 12 Mar 2021 11:43:35 +0100</pubDate>
      
      <guid>https://sergioib.netlify.app/posts/creacion-escenario-openstack/</guid>
      <description>Introduccion En este post se creara un escenario en openstack con varias maquinas virtuales donde a lo largo del curso se realizaran la mayoria de las practicas.
  Tarea 1: Creación de la red interna: ◦ Nombre red interna de &amp;lt;sergio.ibañez&amp;gt; ◦ 10.0.1.0/24
  Tarea 2: Creación de las instancias: ◦ Dulcinea: ▪ Debian Buster sobre volumen con sabor m1.mini ▪ Accesible directamente a través de la red externa y con una IP flotante ▪ Conectada a la red interna, de la que será la puerta de enlace ◦ Sancho: ▪ Ubuntu 20.</description>
    </item>
    
    <item>
      <title>Configuracion Cliente VPN con certificado x509</title>
      <link>https://sergioib.netlify.app/posts/configuracio-clientevpn/</link>
      <pubDate>Thu, 11 Mar 2021 16:19:25 +0100</pubDate>
      
      <guid>https://sergioib.netlify.app/posts/configuracio-clientevpn/</guid>
      <description>Genera una clave privada RSA 4096  Para generarnos nuestra clave privada rsa hacemos uso del comando openssl:
root@debian-sergio:~# openssl genrsa 4096 &amp;gt; /etc/ssl/private/debian-sergio.ibanez.key Generating RSA private key, 4096 bit long modulus (2 primes) ........................++++ .....................................................................................................................................................................................................................................................................................................................................................................................................................++++ e is 65537 (0x010001)  Genera una solicitud de firma de certificado (fichero CSR) y súbelo a gestiona  Creamos el fichero csr para que sea firmado con el siguiente comando y rellenamos los parámetros necesarios que se nos piden: Country Name, State or Province Name (full name), Locality Name, Organization Name, Organizational Unit Name y Common Name (e.</description>
    </item>
    
  </channel>
</rss>
