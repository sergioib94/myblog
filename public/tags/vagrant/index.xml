<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>vagrant on My New Hugo Site</title>
    <link>https://sergioib.netlify.app/tags/vagrant/</link>
    <description>Recent content in vagrant on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 13 Mar 2021 13:08:14 +0100</lastBuildDate><atom:link href="https://sergioib.netlify.app/tags/vagrant/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Instalacion Openstack con Kolla Ansible</title>
      <link>https://sergioib.netlify.app/posts/instalacion-openstack-kolla-ansible/</link>
      <pubDate>Sat, 13 Mar 2021 13:08:14 +0100</pubDate>
      
      <guid>https://sergioib.netlify.app/posts/instalacion-openstack-kolla-ansible/</guid>
      <description>Introduccion Para esta practica contaremos con un escenario de 3 nodos creados con vagrant:
 Instalador (sistema ubuntu), sera donde se preparara openstack para su despliegue. Master (sistema ubuntu) Compute (sistema ubuntu)  El montaje de openstack requiere de mucho recurso por parte de la maquina anfitriona, el nodo master debe de tener al menos 6Gb de ram para que sea capaz de funcionar y de poder desplegarse sin problemas, con respecto a los otros 2 nodos se recomienda usar al menos 2Gb.</description>
    </item>
    
    <item>
      <title>Proxy y Balanceador De Carga</title>
      <link>https://sergioib.netlify.app/posts/proxy-y-balanceador-de-carga/</link>
      <pubDate>Sat, 13 Mar 2021 12:44:43 +0100</pubDate>
      
      <guid>https://sergioib.netlify.app/posts/proxy-y-balanceador-de-carga/</guid>
      <description>Balanceador de carga En la maquina de nuestro escenario llamada balanceador, instalamos haproxy:
apt install haproxy Configuramos haproxy (/etc/haproxy/haproxy.cfg) de la siguiente forma:
global daemon maxconn 256 user haproxy group haproxy log 127.0.0.1 local0 log 127.0.0.1 local1 notice defaults mode http log global timeout connect 5000ms timeout client 50000ms timeout server 50000ms listen granja_cda bind 172.22.5.31:80 #aquí pon la dirección ip del balanceador mode http stats enable stats auth cda:cda balance roundrobin server uno 10.</description>
    </item>
    
    <item>
      <title>Kubernetes Letschat</title>
      <link>https://sergioib.netlify.app/posts/kubernetes-lets-chat/</link>
      <pubDate>Sat, 13 Mar 2021 12:13:11 +0100</pubDate>
      
      <guid>https://sergioib.netlify.app/posts/kubernetes-lets-chat/</guid>
      <description>Introduccion En este post, lo que haremos sera primero crear un cluster de kubernetes, para lo cual nuestro equipo debe de contar con al menos 4 o 5 Gb de ram al menos ya se van a crear 3 maquinas virtuales, un nodo master o controlador y 2 nodos secundarios.
En este escenario credo haciendo uso de vagrant, desplegaremos una aplicacion llamada letschat usando kubeadm.
Preparacion del escenario Empezamos creando en nuestro equipo un directorio donde almacenaremos nuestro escenario vagrant.</description>
    </item>
    
    <item>
      <title>ISCSI</title>
      <link>https://sergioib.netlify.app/posts/iscsi/</link>
      <pubDate>Fri, 12 Mar 2021 18:44:37 +0100</pubDate>
      
      <guid>https://sergioib.netlify.app/posts/iscsi/</guid>
      <description>Para esta practica se han creado 3 maquinas virtuales, 2 debian 10, una cliente y otra servidor con 3 discos de 1Gb y una maquina windows 7.
En el servidor, empezamos instalando los paquetes tgt y lvm2.
apt install tgt lvm2 Mientras en el cliente debian instalamos el paquete iscsi
apt install open-iscsi Preparamos los discos para el uso de ISCSI LUN (en el server), usando lvm2 creamos los volúmenes físicos:</description>
    </item>
    
    <item>
      <title>Sistemas De Ficheros Btrfs</title>
      <link>https://sergioib.netlify.app/posts/sistemas-de-ficheros-btrfs/</link>
      <pubDate>Fri, 12 Mar 2021 17:50:31 +0100</pubDate>
      
      <guid>https://sergioib.netlify.app/posts/sistemas-de-ficheros-btrfs/</guid>
      <description>• Crea un escenario que incluya una máquina y varios discos asociados a ella.
El escenario con el que contamos para esta practica es el de una maquina virtual con sistema operativo debían 10 creada con vagrant con 4 discos adicionales en el que se instalara un Raid5 usando los 3 primeros discos, y el ultimo disco se dejara para posteriormente comprobar sustituciones de discos simulando fallos.
vagrant@Btrfs:~$ lsblk -f NAME FSTYPE LABEL UUID FSAVAIL FSUSE% MOUNTPOINT sda ├─sda1 ext4 983742b1-65a8-49d1-a148-a3865ea09e24 16.</description>
    </item>
    
    <item>
      <title>Servidor DHCP Linux</title>
      <link>https://sergioib.netlify.app/posts/servidor-dhcp-linux/</link>
      <pubDate>Thu, 11 Mar 2021 09:33:55 +0100</pubDate>
      
      <guid>https://sergioib.netlify.app/posts/servidor-dhcp-linux/</guid>
      <description>Funcionamiento de un servidor DHCP El cliente al iniciarse se encuentra en estado init, sin saber sus parámetros ip en ese momento envía un mensaje DHCPDiscover a la dirección de broadcast para saber si algún servidor dhcp le puede ofrecer una ip. El cliente espera un tiempo entre 1 y 10 seg al enviar este dhcpdiscover para evitar posibles colisiones con otras peticiones de otros clientes.
Cuando ya se ha mandado el dhcpdiscover el cliente entra en fase selecting, en la que recibira las dhcpoffer de los servidores dhcp.</description>
    </item>
    
  </channel>
</rss>
